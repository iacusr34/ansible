---
# CSV 타입으로 생성될 결과 파일명에 사용될 날자값 호출
- name: '< MAIN : Common -01 > Get Date'
  shell: 'echo $(date +"%Y%m%d%H%M%S")'
  register: get_date
  delegate_to: localhost
  run_once: yes

# 공통 : 수집 정보가 적용된 호스트를 식별하기 위한 hostname 정보 호출
- name: '< MAIN : Common -02 > Get Hostname'
  shell: 'hostname'
  register: get_hostname

# 공통 : OS Type 및 버전 정보 수집
- name: '< MAIN : Common -03 > Get OS Type and Version'
  shell: 'cat /etc/os-release | egrep -i "name|version"'
  register: get_os_release

# 공통 : OS 기본 정보의 Global 변수 설정
- name: '< MAIN : Common > Set OS Defualt'
  set_fact:
    rs_ostype: "{{ get_os_release.stdout_lines[0].replace('NAME=','').replace('\"','') }}"
    rs_osversion: "{{ get_os_release.stdout_lines[2].replace('VERSION_ID=','').replace('\"','') }}"
    var_major: "{{ get_os_release.stdout_lines[2].replace('VERSION_ID=','').replace('\"','').split('.')[0]|int }}"

# Log 정보 수집 Playbook 수행
- name: '< MAIN : Logs > Check Log Status'
  include_tasks: check_logs.yml

# OS 구성 요소 및 Config 설정 정보 수집 Playbook 수행
- name: '< MAIN : Config > Check Config Status'
  include_tasks: check_config.yml

# kernel 설정 정보 수집 Playbook 수행
- name: '< MAIN : kernel > Check kernel Status'
  include_tasks: check_kernel.yml

# Resource 사용 현황 정보 수집 Playbook 수행
- name: '< MAIN : Resource > Check Resource Status'
  include_tasks: check_resource.yml

# 관리용 Agent 동작 정보 수집 Playbook 수행
- name: '< MAIN : Agetn > Check Standard Agent Status'
  include_tasks: check_agent.yml

# 수집된 결과를 저장하기 위한 CSV File 생성 - 최초 한번만 실행 됨.
- name: '< MAIN : Result -01 > Create a CSV file to store the results'
  file:
    path: '/var/lib/awx/projects/result/migration_check_{{ get_date.stdout }}.csv'
    state: touch
  delegate_to: localhost
  run_once: true

# 생성된 CSV File 내부에 항목별 Title 추가 - 최초 한번만 실행 됨.
- name: '< MAIN : Result -02 > Add a title to the resulting file'
  lineinfile:
    path: '/var/lib/awx/projects/result/migration_check_{{ get_date.stdout }}.csv'
    line: 'HOSTNAME,OS TYPE,OS VERSION,ERROR LOGS,FILESYSTEM,NETWORK ROUTE SETTING,DNS SETTING,NTP STATUS,SAR STATUS,CRONTAB SETTING,SENDMAIL PROCESS STATUS,IPTABLES SERVICE STATUS,SELINUX DISABLE,SYSLOG STATUS,ROOT PROCESS CHECK,FILESYSTEM MOUNT,FSTAB SETTING,NFS STATUS,ULIMIT PROCESS MAX FILE,ULIMIT USER MAX FILE,SYSCTL MSG Queue,SYSCTL CORE,SYSCTL RMEM,SYSCTL WMEM,SYSCTL BACKLOG,SYSCTL SWAP,MTU,CPU USED,MEMORY USED,DISK USED,DCA AGENT STATUS,SNMS AGENT STATUS,SSR AGENT STATUS,BESCLIENT AGENT STATUS'
  delegate_to: localhost
  run_once: true

# 생성된 CSV File 내부에 수집된 정보를 호스트별 순차적으로 추가 저장 됨. 
- name: '< MAIN : Result -03 > Add a result to the resulting file'
  lineinfile:
    path: '/var/lib/awx/projects/result/migration_check_{{ get_date.stdout }}.csv'
    line: '"{{ get_hostname.stdout }}","{{ rs_ostype }}","{{ rs_osversion }}","{{ rs_logs }}","{{ rs_filesystem }}","{{ rs_route }}","{{ rs_resolv }}","{{ rs_ntp }}","{{ rs_sar }}","{{ rs_crontab }}","{{ rs_sendmail }}","{{ rs_iptables }}","{{ rs_selinux }}","{{ rs_syslog }}","{{ rs_whatap }}","{{ rs_mount }}","{{ rs_fstab }}","{{ rs_nfs }}","{{ rs_openfiles }}","{{ rs_userfiles }}","{{ rs_msgq }}","{{ rs_conn }}","{{ rs_rmem }}","{{ rs_wmem }}","{{ rs_backlog }}","{{ rs_swap }}","{{ rs_mtu }}","{{ rs_cpuused }}","{{ rs_memused }}","{{ rs_diskused }}","{{ rs_dca }}","{{ rs_snms }}","{{ rs_ssr }}","{{ rs_besclient }}"'
  delegate_to: localhost

# 최종 결과가 저장된 CSV Filename 출력.
- name: '< MAIN : Result -04 > Result CSV Filename'
  debug:
    msg: 'Result Filename : migration_check_{{ get_date.stdout }}.csv'
  run_once: true
